# database.py
import psycopg2
import bcrypt
import json # Pro práci s JSON daty (pro sloupec gas_stations)

# --- Konfigurace PostgreSQL připojení ---
# TYTO HODNOTY MUSÍTE UPRAVIT PODLE VAŠEHO NASTAVENÍ POSTGRESQL!
DB_CONFIG = {
    'host': 'localhost',
    'database': 'kniha_data',
    'user': 'kniha_user',
    'password': '4T7*hT4cB',
    'port': '5432'
}

def get_db_connection():
    """Získá a vrátí připojení k PostgreSQL databázi."""
    conn = None
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        conn.autocommit = False # Nastavte na False pro explicitní transakce (commit/rollback)
        return conn
    except psycopg2.Error as e:
        print(f"Chyba připojení k databázi: {e}")
        return None

def initialize_db():
    """Inicializuje databázi PostgreSQL a vytváří tabulky, pokud neexistují."""
    conn = get_db_connection()
    if conn is None:
        print("Nelze inicializovat databázi: Připojení selhalo.")
        return

    cursor = conn.cursor()
    try:
        # Drop existing tables to ensure clean schema
        cursor.execute("DROP TABLE IF EXISTS routes;")
        cursor.execute("DROP TABLE IF EXISTS users;")
        print("Existující tabulky byly odstraněny pro čistou inicializaci.")

        # Tabulka uživatelů
        cursor.execute("""
            CREATE TABLE users (
                id SERIAL PRIMARY KEY,
                username VARCHAR(255) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                is_admin BOOLEAN DEFAULT FALSE
            );
        """)
        print("Tabulka 'users' byla vytvořena.")

        # Tabulka tras
        cursor.execute("""
            CREATE TABLE routes (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                name VARCHAR(255) NOT NULL,
                start_location VARCHAR(255) NOT NULL,
                destination VARCHAR(255) NOT NULL,
                distance VARCHAR(255),
                travel_time INTEGER,
                fuel_consumption NUMERIC,
                gas_stations JSONB DEFAULT '[]',
                needs_fuel BOOLEAN DEFAULT FALSE,
                trip_purpose VARCHAR(255),
                waypoints JSONB DEFAULT '[]',
                FOREIGN KEY (user_id) REFERENCES users(id),
                UNIQUE (user_id, name)
            );
        """)
        print("Tabulka 'routes' byla vytvořena.")

        # Create initial admin user
        admin_password = "admin123"  # You should change this in production
        hashed_password = bcrypt.hashpw(admin_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        cursor.execute(
            "INSERT INTO users (username, password_hash, is_admin) VALUES (%s, %s, %s);",
            ("admin", hashed_password, True)
        )
        print("Výchozí admin účet byl vytvořen (username: admin, password: admin123)")

        conn.commit()
        print("Databáze úspěšně inicializována.")
    except psycopg2.Error as e:
        conn.rollback()
        print(f"Chyba při inicializaci databáze: {e}")
    finally:
        if conn:
            cursor.close()
            conn.close()


def register_user(username, password, is_admin=False):
    """Zaregistruje nového uživatele."""
    conn = get_db_connection()
    if conn is None:
        return False
    cursor = conn.cursor()
    try:
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        cursor.execute(
            "INSERT INTO users (username, password_hash, is_admin) VALUES (%s, %s, %s);",
            (username, hashed_password, is_admin)
        )
        conn.commit()
        return True
    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        print(f"Uživatel '{username}' již existuje.")
        return False
    except psycopg2.Error as e:
        conn.rollback()
        print(f"Chyba při registraci uživatele: {e}")
        return False
    finally:
        if conn:
            cursor.close()
            conn.close()

def verify_user(username, password):
    """Ověří uživatelské jméno a heslo."""
    conn = get_db_connection()
    if conn is None:
        return None, False, None # user_id, is_valid, is_admin
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT id, password_hash, is_admin FROM users WHERE username = %s;", (username,))
        result = cursor.fetchone()
        if result:
            user_id, hashed_password, is_admin = result
            if bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8')):
                return user_id, True, is_admin
        return None, False, None
    except psycopg2.Error as e:
        print(f"Chyba při ověřování uživatele: {e}")
        return None, False, None
    finally:
        if conn:
            cursor.close()
            conn.close()

def get_user_id(username):
    """Získá ID uživatele podle uživatelského jména."""
    conn = get_db_connection()
    if conn is None:
        return None
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT id FROM users WHERE username = %s;", (username,))
        result = cursor.fetchone()
        return result[0] if result else None
    except psycopg2.Error as e:
        print(f"Chyba při získávání ID uživatele: {e}")
        return None
    finally:
        if conn:
            cursor.close()
            conn.close()

def get_username_by_id(user_id):
    """Získá uživatelské jméno podle ID."""
    conn = get_db_connection()
    if conn is None:
        return None
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT username FROM users WHERE id = %s;", (user_id,))
        result = cursor.fetchone()
        return result[0] if result else None
    except psycopg2.Error as e:
        print(f"Chyba při získávání uživatelského jména podle ID: {e}")
        return None
    finally:
        if conn:
            cursor.close()
            conn.close()

def get_all_users():
    """Získá všechny uživatele (pro admina)."""
    conn = get_db_connection()
    if conn is None:
        return []
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT id, username, is_admin FROM users ORDER BY username;")
        users = [{'id': row[0], 'username': row[1], 'is_admin': row[2]} for row in cursor.fetchall()]
        return users
    except psycopg2.Error as e:
        print(f"Chyba při získávání všech uživatelů: {e}")
        return []
    finally:
        if conn:
            cursor.close()
            conn.close()

def update_user_admin_status(user_id, is_admin):
    """Aktualizuje administrátorský status uživatele."""
    conn = get_db_connection()
    if conn is None:
        return False
    cursor = conn.cursor()
    try:
        cursor.execute(
            "UPDATE users SET is_admin = %s WHERE id = %s;",
            (is_admin, user_id)
        )
        conn.commit()
        return True
    except psycopg2.Error as e:
        conn.rollback()
        print(f"Chyba při aktualizaci admin statusu: {e}")
        return False
    finally:
        if conn:
            cursor.close()
            conn.close()

def delete_user(user_id):
    """Smaže uživatele a všechny jeho trasy."""
    conn = get_db_connection()
    if conn is None:
        return False
    cursor = conn.cursor()
    try:
        # Nejprve smazat trasy uživatele kvůli FOREIGN KEY omezení
        cursor.execute("DELETE FROM routes WHERE user_id = %s;", (user_id,))
        # Poté smazat uživatele
        cursor.execute("DELETE FROM users WHERE id = %s;", (user_id,))
        conn.commit()
        return True
    except psycopg2.Error as e:
        conn.rollback()
        print(f"Chyba při mazání uživatele: {e}")
        return False
    finally:
        if conn:
            cursor.close()
            conn.close()

def add_route(user_id, name, start_location, destination, distance, travel_time, fuel_consumption, gas_stations, needs_fuel):
    """Přidá novou trasu do databáze."""
    conn = get_db_connection()
    if conn is None:
        return False
    cursor = conn.cursor()
    try:
        cursor.execute(
            """
            INSERT INTO routes (user_id, name, start_location, destination, distance, travel_time, fuel_consumption, gas_stations, needs_fuel)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s);
            """,
            (user_id, name, start_location, destination, distance, travel_time, fuel_consumption, json.dumps(gas_stations), needs_fuel)
        )
        conn.commit()
        return True
    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        print(f"Trasa s názvem '{name}' pro uživatele {user_id} již existuje.")
        return False
    except psycopg2.Error as e:
        conn.rollback()
        print(f"Chyba při přidávání trasy: {e}")
        return False
    finally:
        if conn:
            cursor.close()
            conn.close()

def update_route(route_id, name, start_location, destination, distance, travel_time, fuel_consumption, gas_stations, needs_fuel):
    """Aktualizuje existující trasu."""
    conn = get_db_connection()
    if conn is None:
        return False
    cursor = conn.cursor()
    try:
        cursor.execute(
            """
            UPDATE routes
            SET name = %s, start_location = %s, destination = %s, distance = %s, travel_time = %s, fuel_consumption = %s, gas_stations = %s, needs_fuel = %s
            WHERE id = %s;
            """,
            (name, start_location, destination, distance, travel_time, fuel_consumption, json.dumps(gas_stations), needs_fuel, route_id)
        )
        conn.commit()
        return True
    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        print(f"Trasa s názvem '{name}' již existuje pro tohoto uživatele (při aktualizaci).")
        return False
    except psycopg2.Error as e:
        conn.rollback()
        print(f"Chyba při aktualizaci trasy: {e}")
        return False
    finally:
        if conn:
            cursor.close()
            conn.close()

def get_routes_by_user(user_id):
    """Získá všechny trasy pro konkrétního uživatele."""
    conn = get_db_connection()
    if conn is None:
        return []
    cursor = conn.cursor()
    routes = []
    try:
        cursor.execute(
            """
            SELECT id, name, start_location, destination, distance, travel_time, fuel_consumption, gas_stations, needs_fuel
            FROM routes
            WHERE user_id = %s;
            """,
            (user_id,)
        )
        for row in cursor.fetchall():
            route = {
                'id': row[0],
                'name': row[1],
                'start_location': row[2],
                'destination': row[3],
                'distance': row[4],
                'travel_time': row[5],
                'fuel_consumption': row[6],
                # ZMĚNA ZDE: Odstraněno json.loads(), protože psycopg2 to již převede na Python objekt
                'gas_stations': row[7] if row[7] is not None else [],
                'needs_fuel': row[8]
            }
            routes.append(route)
        return routes
    except psycopg2.Error as e:
        print(f"Chyba při získávání tras uživatele: {e}")
        return []
    finally:
        if conn:
            cursor.close()
            conn.close()

# --- Migrace z JSON (POUZE JEDNOU PRO EXISTUJÍCÍ UŽIVATELE A TRASY) ---
# Pokud tuto funkci použijete, UJISTĚTE SE, ŽE SE SPUSTÍ POUZE JEDNOU,
# jinak by mohlo dojít k duplikaci dat.
def migrate_json_to_postgresql(json_file='login.json'):
    """
    Migruje uživatele a jejich trasy z JSON souboru do PostgreSQL databáze.
    """
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            data = json.load(f)

        print(f"Zahajuji migraci z {json_file} do PostgreSQL...")
        for user_data in data.get('users', []):
            username = user_data.get('username')
            password = user_data.get('password')
            is_admin = user_data.get('admin') == '1' # Convert "1" to True, "0" to False

            if username and password:
                # Zkusit zaregistrovat uživatele, pokud neexistuje
                user_id = get_user_id(username)
                if user_id is None:
                    if register_user(username, password, is_admin):
                        user_id = get_user_id(username) # Získat nově vytvořené ID
                        print(f"Uživatel '{username}' migrován/vytvořen.")
                        # Migrovat trasy uživatele
                        if user_id:
                            for route in user_data.get('trasy', []):
                                route_name = route.get('name')
                                start_location = route.get('start_location')
                                destination = route.get('destination')
                                distance = route.get('distance') # Uložíme jako je (text "XXX.YY km")
                                # Předpokládáme výchozí hodnoty pro nová pole při migraci starých dat
                                travel_time = 0 # Výchozí hodnota
                                fuel_consumption = 0.0 # Výchozí hodnota
                                gas_stations = [] # Výchozí hodnota (prázdný seznam JSON)
                                # needs_fuel je v starém JSONu vypočítáno z distance
                                # Zde je můžete nechat na False nebo nějak vypočítat
                                needs_fuel = "fuel" in route.get('distance', '').lower() # Velmi hrubá detekce z distance stringu, jinak False

                                if route_name and start_location and destination:
                                    if not add_route(user_id, route_name, start_location, destination, distance, travel_time, fuel_consumption, gas_stations, needs_fuel):
                                        print(f"Varování: Nelze migrovat trasu '{route_name}' pro uživatele '{username}'. Možná již existuje.")
                                else:
                                    print(f"Přeskakuji nekompletní trasu pro uživatele '{username}': {route}")
                        else:
                            print(f"Přeskakuji trasy pro uživatele: {username} (uživatel nebyl vytvořen nebo ID není k dispozici).")
                else:
                    print(f"Uživatel '{username}' již existuje v DB. Přeskakuji migraci uživatele.")
            else:
                print(f"Přeskakuji uživatele s nekompletními daty: {user_data}")
        print("Migrace JSON do PostgreSQL dokončena!")
    except FileNotFoundError:
        print(f"JSON soubor '{json_file}' nenalezen pro migraci. Migrace přeskočena.")
    except json.JSONDecodeError as e:
        print(f"Neplatný formát JSON v '{json_file}'. Migrace přeskočena. Chyba: {e}")
    except Exception as e:
        print(f"Při migraci JSON nastala neočekávaná chyba: {e}")

if __name__ == "__main__":
    initialize_db()
    print("PostgreSQL databáze připravena.")

    # --- DŮLEŽITÉ KROKY ---
    # 1. Pokud máte existující login.json a chcete z něj importovat uživatele:
    #    Odkomentujte řádek níže, spusťte tento soubor JEDNOU pomocí `python database.py`.
    #    Po úspěšné migraci, ZAKOMENTUJTE HO ZNOVU, aby se nespouštěl pokaždé.
    migrate_json_to_postgresql()
    # 2. V opačném případě můžete tento blok nechat zakomentovaný.